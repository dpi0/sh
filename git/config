[user]
  name = divyansh
  email = dpi0.dev@proton.me
	signingkey = 2E13AF5C594A51F1

[init]
  defaultBranch = main

[core]
  pager = delta
  editor = nvim
  autocrlf = false
  # Preloads the index into memory for improved performance when running Git commands like status and diff
  preloadindex = true

[commit]
  # includes the full commit diff in the text editor when composing the commit message
  verbose = true
	gpgSign = true
  template = ~/.config/git/template

[merge]
  # https://www.ductile.systems/zdiff3/
  conflictstyle = zdiff3
  # Display a brief summary describing what was merged
  summary = true
  # Display a diffstat after the merge completes, which summarizes the changes made, 
  # showing how many lines were added and removed in each file.
  diffstat = true
  # Include up to 60 commit messages from the merged branch in the merge commit message
  log = 60

[pull]
  # automatically pulls the current branch
  default = current
  # enforce fast-forward merges for pull, 
  # preventing unnecessary merge commits and maintaining a linear commit history
  # equivalent of running git pull --ff-only every time you git pull
  # ff = only
  # equivalent of running git pull --rebase every time you git pull
  # doesn’t make sense to set both of them at once, since --ff-only overrides --rebase
  rebase = true

[push]
  # push the current branch to the remote, assuming the branch has an upstream set
  default = current
  # automatically sets up remote tracking for new branches
  autoSetupRemote = true
  # Push all annotated tags to the remote repository along with the branch # updates
  followTags = true

[rerere]
  # rerere: reuse recovered resolution
  # it remembers how you resolved merge conflicts during a git rebase and 
  # automatically resolves conflicts for you when it can
  # reducing the effort required for repeated merges.
  enabled = 1
  # After a conflict is resolved manually,
  # Git will automatically store the resolution in the rerere cache, 
  # making it available for future use.
  autoUpdate = true

[rebase]
  # automatically runs git stash before a git rebase and git stash pop after.
  # basically passes --autostash to git rebase
  autostash = true
  # make it easier to modify old commits
  # --autosquash always gets passed automatically to git rebase
  autosquash = true
  # If commits are removed or missing during a rebase, 
  # issue a warning rather than # silently ignoring them.
  missingCommitsCheck = warn

[log]
  # Display dates as YYYY-MM-DD HH:MM:DD (e.g., 2025-03-25 14:59:12 -0400)
  date = iso

[branch]
  # Configures git branch to sort branches by most recently used rather than alphabetically,
  # making it easier to locate active branches.
  sort = -committerdate

[tag]
  # Sort tags by the date they were created.
  sort = taggerdate

[diff]
  # better ordering of diffs
  algorithm = histogram

[interactive]
  diffFilter = delta --color-only --features=interactive

[delta]
  features = decorations
  line-numbers = true
  side-by-side = true
  true-color = always
  hyperlinks = true
  hyperlinks-file-link-format = "vscode://file/{path}:{line}"

[delta "interactive"]
  keep-plus-minus-markers = false

[delta "decorations"]
  commit-decoration-style = blue ol
  commit-style = raw
  file-style = omit
  hunk-header-decoration-style = blue box
  hunk-header-file-style = red
  hunk-header-line-number-style = "#067a00"
  hunk-header-style = file line-number syntax

# performance tuning
[pack]
  # Configures Git to auto-detect the number of CPUs and set the number of threads accordingly
  threads = 0
  # enhances Git’s efficiency for large repositories. It tells Git to use up to 5GB of RAM when creating packfiles
  # windowMemory = 5g
  # The packSizeLimit configuration in Git determines the maximum size of a packfile that Git will generate
  # packSizeLimit = 2g

; [url "git@github.com:"]
;   # it’ll replace https://github.com in remotes with git@github.com
;   insteadOf = "https://github.com/"

# data integrity
# [transfer]
  # Verifies the integrity of all objects during data transfer operations like clone, fetch, and receive 
  # helping detect corruption or tampering early.
  # applies to all fsckObjects below.
  # fsckObjects = true

# [receive]
  # fsckObjects = true

# [fetch]
  # fsckObjects = true
  # Automatically remove remote-tracking branches that 
  # no longer exist on the remote repository during a ‘git fetch
  # keep the local repository clean by removing outdated references to remote branches that 
  # have been # deleted
  # prune = true
  # Automatically delete remote tags
  # ensures that your local tags list is up-to-date and 
  # prevents the accumulation of tags that no longer exist on the remote
  # pruneTags = true

[help]
  # When a mistyped Git command closely resembles a valid one
  # this setting prompts the user with a suggestion before executing the corrected command.
  autoCorrect = prompt

# git's own credential helper
[credential]
  ; helper = cache # caches your credentials in memory for a default 15 min
  # Or use one of these:
	helper = store
	; helper = /usr/lib/git-core/git-credential-libsecret
  # helper = manager-core # uses GCM (git credential manager) which uses OS-native keychains (must install GCM first)

[credential "https://github.com"]
  helper = 
  helper = !/usr/bin/gh auth git-credential

[credential "https://gist.github.com"]
  helper = 
  helper = !/usr/bin/gh auth git-credential

[alias]
  a = add
  aa = add -A
  s = show
  p = push 
  pf = push --force
  st = status -sb
  ci = commit
  co = checkout
  b = branch
  l = -c color.diff=true log
  lg = -c color.diff=true log --oneline --decorate --graph
  lga = -c color.diff=true log --oneline --decorate --graph --all
  lgb = -c color.diff=true log --oneline --decorate --graph --branches
  lo = -c color.diff=true log --oneline --decorate
  ff = merge --ff-only
  last = log -1 HEAD
  unstage = reset HEAD --
  amend = commit --amend --no-edit
  hist = log --pretty=format:'%C(yellow)%h%Creset %ad | %s%d [%an]' --graph --date=short
  fixup = commit --fixup
  squash = rebase -i --autosquash
  undo = reset --hard @{1}

# SOURCES:
# https://jvns.ca/blog/2024/02/16/popular-git-config-options/
# https://www.jamescherti.com/optimized-git-configuration-for-performance-and-usability/
# https://github.com/henrebotha/dotfiles/blob/main/git/dot-gitconfig
# https://github.com/felipec/dotfiles/blob/master/.gitconfig
