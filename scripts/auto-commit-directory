#!/usr/bin/env bash

# Function to display help menu
display_help() {
  echo "Usage: $0 [options] <directory>"
  echo "Automates the process of committing changes in subdirectories of a Git repository."
  echo ""
  echo "Options:"
  echo "  -h, --help      Display this help menu and exit."
  echo "  -v, --verbose   Enable verbose mode, showing detailed output."
  echo "  -l, --log       Log actions to a file (log.txt)."
  echo ""
  echo "Arguments:"
  echo "  <directory>     The directory containing the Git repository."
  echo ""
  echo "Example:"
  echo "  $0 -v ~/my_project"
  exit 0
}

# Initialize variables
verbose=false
log=false
log_file="$HOME/.auto-commit-directory.log"

# Parse command-line options
while [[ "$#" -gt 0 ]]; do
  case $1 in
    -h|--help) display_help ;;
    -v|--verbose) verbose=true ;;
    -l|--log) log=true ;;
    *) target_dir="$1" ;;
  esac
  shift
done

# Check if a directory name was provided as an argument
if [ -z "$target_dir" ]; then
  echo "Error: No directory provided."
  display_help
  exit 1
fi

# Check if the specified directory exists and contains a .git directory
if [ ! -d "$target_dir" ]; then
  echo "Error: Directory '$target_dir' does not exist."
  exit 1
fi

if [ ! -d "$target_dir/.git" ]; then
  echo "Error: Directory '$target_dir' is not a Git repository."
  exit 1
fi

# Change to the specified directory
cd "$target_dir" || { echo "Error: Unable to change to directory '$target_dir'."; exit 1; }

# Initialize log file
if $log; then
  echo "Logging started at $(date +"%d-%m-%Y %H:%M:%S")" > "$log_file"
fi

# Function to log messages
log_message() {
  if $log; then
    echo "$1" >> "$log_file"
  fi
  if $verbose; then
    echo "$1"
  fi
}

# Loop through each directory within the specified directory
for dir in */; do
  # Check if it's a directory
  if [ -d "$dir" ]; then
    # Strip trailing slash
    dir_name=${dir%/}

    # Stage changes in the directory
    git add "$dir_name" > /dev/null 2>&1

    # Check if there are any changes to commit
    if ! git diff-index --quiet HEAD -- "$dir_name"; then
      # Get the current date and time
      current_date=$(date +"%d-%m-%Y %H:%M")

      # Get the list of staged files
      files_changed=$(git diff --cached --name-only -- "$dir_name" | sed 's/^/    /')

      # Create the commit message with the file list
      commit_message="Update $dir_name $current_date\n\nFiles changed:\n$files_changed"

      # Commit with the commit message from a file
      echo -e "$commit_message" | git commit -F - > /dev/null 2>&1

      # Log the committed directory
      log_message "Committed directory: $dir_name"
    else
      # Unstage the changes if there's nothing to commit
      git reset "$dir_name" > /dev/null 2>&1

      # Log the unstaged directory
      log_message "No changes to commit in directory: $dir_name"
    fi
  fi
done

# Final log message
log_message "Script completed at $(date +"%d-%m-%Y %H:%M:%S")"

echo "Script execution completed."
