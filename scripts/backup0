#!/usr/bin/env bash

# Global variables
SCRIPT_NAME=$(basename "$0")
INPUT_FILES=()
OUTPUT_DIR=""
COMPRESS=false
ENCRYPT=false
ENCRYPT_KEY=""
UPLOAD=false
UPLOAD_TYPE=""
UPLOAD_BACKEND_TYPE="rclone"
RCLONE_STORAGE=""
SSH_ADDRESS=""
SSH_DESTINATION_DIRECTORY=""
SSH_PORT="22"
SSH_KEY_PATH="$HOME/.ssh/id_ed25519"
NEW_SNAPSHOT=false
DELETE_DIRECTORY=false
EXCLUDE_PATTERNS=()
REQUIRED_TOOLS=("rsync" "tar" "xz" "age" "rclone")
LOG_FILE="$HOME/.${SCRIPT_NAME}.log"

# Color codes
RED='\033[38;5;196m'
GREEN='\033[38;5;46m'
YELLOW='\033[38;5;214m'
BLUE='\033[38;5;45m'
PINK='\033[38;5;204m'
NC='\033[0m' # No Color

# Function to display help menu
display_help() {
    echo -e "Usage: ${BLUE}$SCRIPT_NAME${NC} ${YELLOW}-i <input_file1> <input_dir1> ... -o <output_dir> [-z] [-e <public_key>] [-u <upload_type>] [--upload-backend-type <backend_type>] [--rclone-storage <storage_type>] [--ssh-address <ssh_address>] [--ssh-destination-directory <destination_directory>] [--ssh-port <port>] [--ssh-key-path <key_path>] [--new-snapshot] [--delete-directory] [--exclude <pattern1> <pattern2> ...]${NC}"
    echo "Options:"
    echo -e "  ${YELLOW}-i, --input${NC}               Specify one or more input files or directories to backup."
    echo -e "  ${YELLOW}-o, --output${NC}              Specify the output directory for the backup."
    echo -e "  ${YELLOW}-z, --compress${NC}            Perform tar+xz compression of the output directory."
    echo -e "  ${YELLOW}-e, --encrypt${NC}             Encrypt the compressed tar.xz file using the specified public key."
    echo -e "  ${YELLOW}-u, --upload${NC}              Upload the specified type (directory, zip, encrypt) to the remote."
    echo -e "  ${YELLOW}--upload-backend-type${NC}     Specify the upload backend type (rclone or local). Default is rclone."
    echo -e "  ${YELLOW}--rclone-storage${NC}          Specify the rclone storage type (required if --upload-backend-type is rclone, e.g., mega-remote)."
    echo -e "  ${YELLOW}--ssh-address${NC}             Specify the SSH address for local uploads (required if --upload-backend-type is local)."
    echo -e "  ${YELLOW}--ssh-destination-directory${NC} Specify the destination directory for local uploads (required if --upload-backend-type is local)."
    echo -e "  ${YELLOW}--ssh-port${NC}                Specify the SSH port for local uploads (default is 22)."
    echo -e "  ${YELLOW}--ssh-key-path${NC}            Specify the SSH key path for local uploads."
    echo -e "  ${YELLOW}--new-snapshot${NC}            Create a new timestamped snapshot directory."
    echo -e "  ${YELLOW}--delete-directory${NC}        Delete the output directory after creating the tar.xz file (only if -z or --compress is used)."
    echo -e "  ${YELLOW}--exclude${NC}                 Specify patterns to exclude from the backup."
    echo -e "  ${YELLOW}-h, --help${NC}                Display this help menu."
    echo ""
    echo "Commands:"
    echo -e "  ${YELLOW}log${NC}                       Display the log file using bat (if available) or cat."
    echo ""
    echo "Upload Types:"
    echo -e "  ${YELLOW}-u directory${NC} or ${YELLOW}-u d${NC}: Upload the directory only."
    echo -e "  ${YELLOW}-u zip${NC} or ${YELLOW}-u z${NC}: Upload the compressed .tar.xz file."
    echo -e "  ${YELLOW}-u encrypt${NC} or ${YELLOW}-u e${NC}: Upload the encrypted .tar.xz.age file."
    echo ""
    echo "Examples:"
    echo -e "  1. ${GREEN}Simple local backup${NC} placing input files/dirs in the specified output directory 'test':"
    echo -e "     ${BLUE}$SCRIPT_NAME${NC} ${YELLOW}--input${NC} file1 dir1 file2 dir2 ${YELLOW}--output${NC} ~/Backup/test"
    echo -e "     ${BLUE}$SCRIPT_NAME${NC} ${YELLOW}-i${NC} file1 dir1 file2 dir2 ${YELLOW}-o${NC} ~/Backup/test"
    echo ""
    echo -e "  2. ${GREEN}Exclude certain files/dirs${NC} in the input directories:"
    echo -e "     ${BLUE}$SCRIPT_NAME${NC} ${YELLOW}-i${NC} file1 dir1 file2 dir2 ${YELLOW}--exclude${NC} .Trash-1000 ${YELLOW}--exclude${NC} node_modules ${YELLOW}--exclude${NC} .cargo ${YELLOW}-o${NC} ~/Backup/test"
    echo ""
    echo -e "  3. ${GREEN}Create a tar ball and compress${NC} the output directory 'test' using xz:"
    echo -e "     ${BLUE}$SCRIPT_NAME${NC} ${YELLOW}-i${NC} file1 dir1 file2 dir2 ${YELLOW}-o${NC} ~/Backup/test ${YELLOW}-z${NC}"
    echo ""
    echo -e "  4. ${GREEN}Encrypt the tar.xz using age${NC} via SSH public key only, creating a tar.xz.age file:"
    echo -e "     ${BLUE}$SCRIPT_NAME${NC} ${YELLOW}-i${NC} file1 dir1 file2 dir2 ${YELLOW}-o${NC} ~/Backup/test ${YELLOW}-z${NC} ${YELLOW}-e${NC} ~/.ssh/age-key.pub"
    echo ""
    echo -e "  5. ${GREEN}Decrypt, extract, and get back${NC} the output directory:"
    echo -e "     ${BLUE}age${NC} ${YELLOW}-d${NC} ${YELLOW}-i${NC} ~/.ssh/age-key test.tar.xz.age > test.tar.xz"
    echo -e "     ${BLUE}mkdir${NC} ${YELLOW}-p${NC} test"
    echo -e "     ${BLUE}tar${NC} ${YELLOW}-xJvf${NC} test.tar.xz ${YELLOW}-C${NC} test"
    echo ""
    echo -e "  6. ${GREEN}Upload the encrypted file${NC} using SSH to a specified remote folder:"
    echo -e "     ${BLUE}$SCRIPT_NAME${NC} ${YELLOW}-i${NC} file1 dir1 file2 dir2 ${YELLOW}-o${NC} ~/Backup/test ${YELLOW}-z${NC} ${YELLOW}-e${NC} ~/.ssh/age-key.pub ${YELLOW}--upload-backend-type${NC} local ${YELLOW}--upload${NC} encrypt ${YELLOW}--ssh-port${NC} 3841 ${YELLOW}--ssh-key-path${NC} ~/.ssh/server ${YELLOW}--ssh-address${NC} user@192.168.1.312 ${YELLOW}--ssh-destination-directory${NC} ~/remote-folder"
    echo ""
    echo -e "  7. ${GREEN}Upload the compressed file${NC} using rclone to a remote storage:"
    echo -e "     ${BLUE}$SCRIPT_NAME${NC} ${YELLOW}-i${NC} file1 dir1 file2 dir2 ${YELLOW}-o${NC} ~/Backup/test ${YELLOW}-z${NC} ${YELLOW}--upload-backend-type${NC} rclone ${YELLOW}--upload${NC} zip ${YELLOW}--rclone-storage${NC} mega-remote"
    echo ""
    echo -e "To create an SSH key pair for encryption, use the following command:"
    echo -e "  ${BLUE}ssh-keygen${NC} ${YELLOW}-t${NC} ed25519 ${YELLOW}-f${NC} ~/.ssh/backup0 ${YELLOW}-C${NC} 'backup0' ${YELLOW}-N${NC} 'your_passphrase'"
    echo -e "This will create a public key at ${YELLOW}~/.ssh/backup0.pub${NC} and a private key at ${YELLOW}~/.ssh/backup0${NC}."
    echo -e "Make sure to use a passphrase for greater security and use ed25519 for a stronger key."
    exit 0
}

# Function to handle errors
handle_error() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

# Function to check for required tools
check_required_tools() {
    for tool in "${REQUIRED_TOOLS[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            handle_error "Required tool '$tool' is not installed. Please install it and try again."
        fi
    done
}

# Function to validate input and output directories
validate_inputs() {
    if [ ${#INPUT_FILES[@]} -eq 0 ]; then
        handle_error "No input files or directories specified. Use -i or --input to specify them."
    fi

    if [ -z "$OUTPUT_DIR" ]; then
        handle_error "No output directory specified. Use -o or --output to specify it."
    fi

    if [ "$NEW_SNAPSHOT" = true ]; then
        local timestamp=$(date +"%d_%b_%Y_%H_%M_%S")
        OUTPUT_DIR="${OUTPUT_DIR}_${timestamp}"
    fi

    if [ ! -d "$OUTPUT_DIR" ]; then
        mkdir -p "$OUTPUT_DIR" || handle_error "Failed to create output directory: $OUTPUT_DIR"
    fi
}

# Function to log messages
log_message() {
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S.%3N")
    local log_entry="[$timestamp] $1"
    echo "$log_entry" >> "$LOG_FILE"
}

# Function to perform incremental backup using rsync
perform_rsync_backup() {
    for input in "${INPUT_FILES[@]}"; do
        if [ -e "$input" ]; then
            echo -e "${BLUE}Starting rsync for: ${YELLOW}$input${NC}"
            local rsync_command="rsync -avh --progress --delete"
            for pattern in "${EXCLUDE_PATTERNS[@]}"; do
                rsync_command+=" --exclude='$pattern'"
            done
            rsync_command+=" '$input' '$OUTPUT_DIR/'"
            eval "$rsync_command" || handle_error "Failed to rsync $input to $OUTPUT_DIR"
            log_message "[BACKUP] $input"
            echo -e "${GREEN}Finished rsync for: ${YELLOW}$input${NC}"
        else
            handle_error "Input file or directory does not exist: $input"
        fi
    done
}

# Function to perform tar+xz compression
perform_tar_compression() {
    local tar_output="${OUTPUT_DIR%/*}/$(basename "$OUTPUT_DIR").tar.xz"
    echo -e "${BLUE}Starting tar+xz compression for: ${YELLOW}$OUTPUT_DIR${NC}"
    echo -e "${PINK}Compressing...${NC}"
    tar -cJf "$tar_output" -C "${OUTPUT_DIR%/*}" "$(basename "$OUTPUT_DIR")" || handle_error "Failed to create tar.xz archive"
    echo -e "${GREEN}Backup completed successfully. Compressed archive saved as: ${YELLOW}$tar_output${NC}"
    log_message "[COMPRESS] $OUTPUT_DIR"

    if [ "$DELETE_DIRECTORY" = true ]; then
        rm -rf "$OUTPUT_DIR" || handle_error "Failed to delete directory: $OUTPUT_DIR"
        echo -e "${GREEN}Directory deleted: ${YELLOW}$OUTPUT_DIR${NC}"
        log_message "[DELETE] $OUTPUT_DIR"
    fi
}

# Function to perform encryption using age
perform_encryption() {
    local tar_output="${OUTPUT_DIR%/*}/$(basename "$OUTPUT_DIR").tar.xz"
    local encrypted_output="${tar_output}.age"

    if [ ! -f "$tar_output" ]; then
        handle_error "Compressed tar.xz file not found. Please ensure the -z or --compress flag is used."
    fi

    if [ ! -f "$ENCRYPT_KEY" ]; then
        handle_error "Public key file '$ENCRYPT_KEY' does not exist. Please provide a valid public key."
    fi

    echo -e "${BLUE}Starting encryption for: ${YELLOW}$tar_output${NC}"
    echo -e "${PINK}Encrypting...${NC}"
    age -R "$ENCRYPT_KEY" "$tar_output" > "$encrypted_output" || handle_error "Failed to encrypt the tar.xz file"
    echo -e "${GREEN}Encryption completed successfully. Encrypted file saved as: ${YELLOW}$encrypted_output${NC}"
    echo ""
    echo "To decrypt the file, use the following command:"
    local private_key="${ENCRYPT_KEY%.pub}"
    echo "  age -d -i $private_key $encrypted_output > $(basename "$tar_output")"
    echo "Then extract the tar.xz file to get back the output directory:"
    echo "  mkdir -p $OUTPUT_DIR"
    echo "  tar -xJvf $(basename "$tar_output") -C $OUTPUT_DIR"
    log_message "[ENCRYPT] $OUTPUT_DIR"
}

# Function to perform upload using rclone
perform_rclone_upload() {
    local upload_path=""
    case "$UPLOAD_TYPE" in
        directory|d)
            upload_path="$OUTPUT_DIR"
            ;;
        zip|z)
            if [ "$COMPRESS" = false ]; then
                handle_error "Compression (-z or --compress) is required for uploading the zip file."
            fi
            upload_path="${OUTPUT_DIR%/*}/$(basename "$OUTPUT_DIR").tar.xz"
            ;;
        encrypt|e)
            if [ "$COMPRESS" = false ] || [ "$ENCRYPT" = false ]; then
                handle_error "Compression (-z or --compress) and encryption (-e or --encrypt) are required for uploading the encrypted file."
            fi
            upload_path="${OUTPUT_DIR%/*}/$(basename "$OUTPUT_DIR").tar.xz.age"
            ;;
        *)
            handle_error "Invalid upload type. Use -u directory, -u zip, or -u encrypt."
            ;;
    esac

    echo -e "${BLUE}Starting rclone upload for: ${YELLOW}$upload_path${NC}"
    rclone sync "$upload_path" "$RCLONE_STORAGE:$(basename "$upload_path")" || handle_error "Failed to upload $upload_path to $RCLONE_STORAGE"
    echo -e "${GREEN}Upload completed successfully.${NC}"
    log_message "[UPLOAD] $upload_path"
}

# Function to perform local upload using rsync over SSH
perform_local_upload() {
    local upload_path=""
    case "$UPLOAD_TYPE" in
        directory|d)
            upload_path="$OUTPUT_DIR"
            ;;
        zip|z)
            if [ "$COMPRESS" = false ]; then
                handle_error "Compression (-z or --compress) is required for uploading the zip file."
            fi
            upload_path="${OUTPUT_DIR%/*}/$(basename "$OUTPUT_DIR").tar.xz"
            ;;
        encrypt|e)
            if [ "$COMPRESS" = false ] || [ "$ENCRYPT" = false ]; then
                handle_error "Compression (-z or --compress) and encryption (-e or --encrypt) are required for uploading the encrypted file."
            fi
            upload_path="${OUTPUT_DIR%/*}/$(basename "$OUTPUT_DIR").tar.xz.age"
            ;;
        *)
            handle_error "Invalid upload type. Use -u directory, -u zip, or -u encrypt."
            ;;
    esac

    echo -e "${BLUE}Starting local upload for: ${YELLOW}$upload_path${NC}"
    rsync -r -avh --progress -e "ssh -p $SSH_PORT -i $SSH_KEY_PATH" "$upload_path" "$SSH_ADDRESS:$SSH_DESTINATION_DIRECTORY" || handle_error "Failed to upload $upload_path to $SSH_ADDRESS:$SSH_DESTINATION_DIRECTORY"
    echo -e "${GREEN}Upload completed successfully.${NC}"
    log_message "[UPLOAD] $upload_path to $SSH_ADDRESS:$SSH_DESTINATION_DIRECTORY"
}

# Function to display the log file
display_log() {
    if command -v bat &> /dev/null; then
        bat "$LOG_FILE"
    else
        cat "$LOG_FILE"
    fi
}

# Check if no arguments are provided and display help menu
if [ $# -eq 0 ]; then
    display_help
fi

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -i|--input)
            shift
            while [[ $# -gt 0 && ! "$1" =~ ^- ]]; do
                INPUT_FILES+=("$1")
                shift
            done
            ;;
        -o|--output)
            shift
            OUTPUT_DIR="$1"
            shift
            ;;
        -z|--compress)
            COMPRESS=true
            shift
            ;;
        -e|--encrypt)
            ENCRYPT=true
            shift
            ENCRYPT_KEY="$1"
            shift
            ;;
        -u|--upload)
            UPLOAD=true
            shift
            UPLOAD_TYPE="$1"
            shift
            ;;
        --upload-backend-type)
            shift
            UPLOAD_BACKEND_TYPE="$1"
            shift
            ;;
        --rclone-storage)
            shift
            RCLONE_STORAGE="$1"
            shift
            ;;
        --ssh-address)
            shift
            SSH_ADDRESS="$1"
            shift
            ;;
        --ssh-destination-directory)
            shift
            SSH_DESTINATION_DIRECTORY="$1"
            shift
            ;;
        --ssh-port)
            shift
            SSH_PORT="$1"
            shift
            ;;
        --ssh-key-path)
            shift
            SSH_KEY_PATH="$1"
            shift
            ;;
        --new-snapshot)
            NEW_SNAPSHOT=true
            shift
            ;;
        --delete-directory)
            DELETE_DIRECTORY=true
            shift
            ;;
        --exclude)
            shift
            while [[ $# -gt 0 && ! "$1" =~ ^- ]]; do
                EXCLUDE_PATTERNS+=("$1")
                shift
            done
            ;;
        -h|--help)
            display_help
            ;;
        log)
            display_log
            exit 0
            ;;
        *)
            handle_error "Unknown option: $1"
            ;;
    esac
done

# Check for required tools
check_required_tools

# Validate inputs and perform backup
validate_inputs
perform_rsync_backup

# Perform tar+xz compression if the -z or --compress flag is provided
if [ "$COMPRESS" = true ]; then
    perform_tar_compression
fi

# Perform encryption if the -e or --encrypt flag is provided
if [ "$ENCRYPT" = true ]; then
    perform_encryption
fi

# Perform upload if the -u or --upload flag is provided
if [ "$UPLOAD" = true ]; then
    if [ "$UPLOAD_BACKEND_TYPE" = "rclone" ]; then
        if [ -z "$RCLONE_STORAGE" ]; then
            handle_error "Rclone storage type (--rclone-storage) is required for rclone uploads."
        fi
        perform_rclone_upload
    elif [ "$UPLOAD_BACKEND_TYPE" = "local" ]; then
        if [ -z "$SSH_ADDRESS" ]; then
            handle_error "SSH address (--ssh-address) is required for local uploads."
        fi
        if [ -z "$SSH_DESTINATION_DIRECTORY" ]; then
            handle_error "SSH destination directory (--ssh-destination-directory) is required for local uploads."
        fi
        if [ -z "$SSH_PORT" ]; then
            handle_error "SSH port (--ssh-port) is required for local uploads."
        fi
        if [ -z "$SSH_KEY_PATH" ]; then
            handle_error "SSH key path (--ssh-key-path) is required for local uploads."
        fi
        perform_local_upload
    else
        handle_error "Invalid upload backend type. Use rclone or local."
    fi
fi
