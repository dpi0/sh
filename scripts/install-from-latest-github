#!/usr/bin/env bash

# Global variables
SCRIPT_NAME=$(basename "$0")
INSTALL_DIR="$HOME/Applications"
REPO_OWNER=""
REPO_NAME=""
ARCHIVE_NAME=""
DESTINATION_DIR="$PWD"  # Default to current directory
INSTALL=false
EXTRACT=false

# Function to display help menu
display_help() {
    msg "usage: $SCRIPT_NAME <owner/repo> <archive.tar.xxx> [-d <destination_dir>] [-i] [-e]"
    msg ""
    msg "Download and optionally install the latest release from a GitHub repository."
    msg ""
    msg "options:"
    msg "  <owner/repo>                 github repository owner and name."
    msg "  <archive.tar.xxx>            name of the archive to download."
    msg "  -d, --destination <destination_dir> directory to save and decompress the archive. (default: current directory)"
    msg "  -i, --install                install the binary to $INSTALL_DIR after extraction."
    msg "  -e, --extract                only decompress the archive, do not download."
    msg "  -h, --help                   display this help menu."
    msg ""
    msg "examples:"
    msg "  $SCRIPT_NAME oberblastmeister/trashy trash-x86_64-unknown-linux-gnu.tar.gz"
    msg "  $SCRIPT_NAME oberblastmeister/trashy trash-x86_64-unknown-linux-gnu.tar.gz -d ~/test"
    msg "  $SCRIPT_NAME oberblastmeister/trashy trash-x86_64-unknown-linux-gnu.tar.gz -i"
    msg "  $SCRIPT_NAME oberblastmeister/trashy trash-x86_64-unknown-linux-gnu.tar.gz -e"
    exit 0
}

# Function to handle errors
handle_error() {
    msg "Error: $1"
    exit 1
}

# Function to display messages
msg() {
    echo "$@"
}

# Function to check if required tools are installed
check_required_tools() {
    local required_tools=("wget" "jq" "ouch" "fd")
    local missing_tools=()

    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
        fi
    done

    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        msg "Error: The following required tools are not installed:"
        for tool in "${missing_tools[@]}"; do
            msg "  - $tool"
        done
        msg "Please install them and try again."
        exit 1
    fi
}

# Parse command line arguments
parse_arguments() {
    if [[ "$#" -lt 1 ]]; then
        display_help
    fi

    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        display_help
    fi

    if [[ "$#" -lt 2 ]]; then
        handle_error "Missing required parameters."
    fi

    # First argument is owner/repo
    IFS='/' read -r REPO_OWNER REPO_NAME <<< "$1"
    ARCHIVE_NAME="$2"

    shift 2

    while [[ "$#" -gt 0 ]]; do
        case $1 in
            -d|--destination) DESTINATION_DIR="$2"; shift ;;
            -i|--install) INSTALL=true ;;
            -e|--extract) EXTRACT=true ;;
            -h|--help) display_help ;;
            *) handle_error "Unknown parameter passed: $1" ;;
        esac
        shift
    done
}

# Check if all required parameters are provided
check_required_parameters() {
    if [[ -z "$REPO_OWNER" || -z "$REPO_NAME" || -z "$ARCHIVE_NAME" ]]; then
        handle_error "Missing required parameters."
    fi
}

# Ensure the destination directory exists
create_destination_directory() {
    mkdir -p "$DESTINATION_DIR" || handle_error "Failed to create destination directory."
}

# Get the latest release version
get_latest_release_version() {
    latest_version=$(wget -qO- "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/latest" | jq -r '.tag_name')
    if [[ -z "$latest_version" ]]; then
        handle_error "Failed to retrieve the latest release version."
    fi
}

# Download the archive
download_archive() {
    if [[ "$EXTRACT" == "false" ]]; then
        msg "Downloading $ARCHIVE_NAME from $REPO_OWNER/$REPO_NAME release $latest_version..."
        wget -q -O "$DESTINATION_DIR/$ARCHIVE_NAME" "https://github.com/$REPO_OWNER/$REPO_NAME/releases/download/$latest_version/$ARCHIVE_NAME" || handle_error "Failed to download the archive."
    fi
}

# Decompress the archive using ouch
decompress_archive() {
    if [[ "$EXTRACT" == "true" ]]; then
        msg "Decompressing $ARCHIVE_NAME to $DESTINATION_DIR..."
        ouch decompress "$DESTINATION_DIR/$ARCHIVE_NAME" -d "$DESTINATION_DIR" || handle_error "Failed to decompress the archive."
    fi
}

# Install the binary to ~/Applications
install_binary() {
    if $INSTALL; then
        msg "Installing binary to $INSTALL_DIR..."
        mkdir -p "$INSTALL_DIR" || handle_error "Failed to create $INSTALL_DIR directory."
        binary_path=$(fd "$REPO_NAME" "$DESTINATION_DIR" --type f --hidden --follow --maxdepth 3)
        if [[ -z "$binary_path" ]]; then
            handle_error "Binary not found in the extracted directory."
        fi
        cp "$binary_path" "$INSTALL_DIR/" || handle_error "Failed to copy binary to $INSTALL_DIR."
        msg "Successfully installed $REPO_NAME to $INSTALL_DIR."
    fi
}

# Main function to orchestrate the script
main() {
    check_required_tools
    parse_arguments "$@"
    check_required_parameters
    create_destination_directory
    if [[ "$EXTRACT" == "false" ]]; then
        get_latest_release_version
        download_archive
    fi
    decompress_archive
    install_binary
    msg "Done $ARCHIVE_NAME $DESTINATION_DIR."
}

# Execute the main function
main "$@"
